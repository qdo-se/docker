* 2021 Feb 19
  - Copy-on-Write
  - Using VPN: change "default-address-pool" in /etc/docker/daemon.json or ~/.docker/daemon.json

* 2021 Feb 26
  - Should run Docker as a unprivileged user
  - .dockerignore
  - `docker build --no-cache`
  - Alpine Linux and JVM
  - Cloud registries, Internet latencies can have real impact on deployment
    - good image design, thin layers can help
  - Docker authentication can store login information locally
  - command: less ~/.docker/config.json

** Build local basic registry
   #+BEGIN_SRC sh
     git clone https://github.com/spkane/basic-registry --config core.autocrlf=input

     cd ./basic-registry

     cp config.yml.sample config.yml

     # Create certs
     openssl req -x509 -nodes -sha256 -newkey rsa:4096 -keyout registry.key -out registry.crt -days 14 -subj '/C=US'

     # Call `htpasswd` command to encrypt password
     docker run --entrypoint htpasswd spkane/basic-registry:latest -Bbn my-user my-password > htpasswd

     # Build registry
     docker build -t my-registry .

     # Run registry
     docker run -d -p 5000:5000 --name registry my-registry

     # Check logs
     docker container logs registry
   #+END_SRC

** Test local registry

   #+BEGIN_SRC sh
     docker login --username my-user --password my-password 127.0.0.1:5000

     docker tag my-registry 127.0.0.1:5000/my-registry

     docker push 127.0.0.1:5000/my-registry

     docker pull 127.0.0.1:5000/my-registry

     docker stop registry

     docker rm registry
   #+END_SRC

   - nsenter: enter name space or run program in different namespaces

   - Using multistage builds and from scratch to create minimal image

   #+BEGIN_SRC sh
     FROM golang as compile
     RUN CGO_ENABLED=0 go get -a -ldflags '-s' github.com/adriaandejonge/helloworld

     FROM scratch
     COPY --from=compile /go/bin/helloworld .
     EXPOSE 8080
     CMD ["./helloworld"]
   #+END_SRC

* 2021 March 5

  #+BEGIN_SRC sh
    docker run -h CONTAINER -i -t debian /bin/bash

    # Stop container that's running on port 8080
    docker stop $(docker ps -qa -f publish=8080)

    # Remove all stopped containers
    docker rm -v $(docker ps -aq -f status=exited)
  #+END_SRC

  #+BEGIN_SRC sh
    # Turn a container to an image
    docker commmit <container-name> <image-name>
  #+END_SRC

* 2021 March 12

  - Run *docker info* to get info about file system

  - the AUFS filesystem has a hard limit of 127 layers

  - *docker info* = *docker system info*

** Link

   - Using *--link* to link container (This is deprecated, use network and service instead)

     - *--link <target-container-name>:<referred-host-name-for-target-container>*
     - *--link* create an entry in /etc/hosts to easily access other container with hostname

   #+BEGIN_SRC sh
     ocker run --name myredis -d redis # first container

     docker run --rm -it --link myredis:redis redis /bin/bash # second container

     # Running inside the second container
     redis-cli -h redis -p 6379

     ping

     set "persistence" "test"

     save

     exit

     exit
   #+END_SRC

** Mount

   - Note: It isn’t possible to specify a host directory inside a Dockerfile for reasons of portability and security(the file or directory may not exist in other systems, and containers shouldn’t beable to mount sensitive files like etc/passwd without explicit permission)
     - Cannot bind mount in Dockerfile due to security and portability issues

   - Use *volumes-from* to access data of another container with <container-name>
     - Useful for backup data

   #+BEGIN_SRC sh
  docker run -v /dbdata --name dbstore ubuntu /bin/bash

  docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu \
         tar cvf /backup/backup.tar /dbdata
   #+END_SRC

* 2021 March 19

** Inspect changes

   - *docker diff [container]* : inspect changes that's been made inside this container

** Saving as tar files

   - *save* and *load* commands for images

   #+BEGIN_SRC sh
     docker save -o [tar-file] [image]

     docker load < [tar-file]
   #+END_SRC

   - *import* and *export* commands for containers

   #+BEGIN_SRC sh
     docker export [container] > [tar-file]

     docker import - [image] < [tar-file]
   #+END_SRC

   - *export* will squash history, *save* will keep history
   - *docker history [image]* : will show the layers of all images

** ENTRYPOINT vs CMD

   - CMD can be overwritten by an argument to *docker run*
   - ENTRYPOINT can only be overwritten with *--entrypoint* option of *docker run*

** Best practives

   - Run a single process per container
   - Manage data and runtime configuration outside the containers and images
   - Use .dockerignore file
   - Use official images from Docker Hub
   - Minimize the image

** COPY vs ADD

   - Using COPY if there is no need to handle tar or remote URL

** ONBUILD

   - Parent image tells the child image what to do at build time

   - The ONBUILD directives of the parent will be executed first

   - This is useful when we want to delay build steps which we need access to the build context. For example, parent image does not have access to package.json at build time.

   - Below example is in *./examples/onbuild*

   - Create dockerfile Dockerfile.parent in parent directory

   #+BEGIN_SRC dockerfile
     FROM node

     RUN mkdir -p /usr/src/app
     WORKDIR /usr/src/app

     ONBUILD COPY package.json /usr/src/app/
     ONBUILD RUN npm install
     ONBUILD COPY . /usr/src/app

     CMD [ "npm", "run" ]
   #+END_SRC

   - Create dockerfile Dockerfile.child in child directory

     #+BEGIN_SRC dockerfile
       FROM node:parent-onbuild

       RUN echo 'Child directive'

       CMD [ "npm", "run" ]
     #+END_SRC

   - Run these

   #+BEGIN_SRC sh
     # Build node parent in parent context
     docker image build --no-cache -t node:parent-onbuild parent/

     # Build node child in child context
     docker image build --no-cache -t node:child child/



     # Test
     docker container run -it node:child /bin/bash
     ls -al
     exit

     docker container run -it node:parent-onbuild /bin/bash
     ls -al
     exit
   #+END_SRC
* 2021 April 2

  - docker pause
